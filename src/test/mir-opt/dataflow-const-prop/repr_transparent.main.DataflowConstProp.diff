- // MIR for `main` before DataflowConstProp
+ // MIR for `main` after DataflowConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/repr_transparent.rs:+0:11: +0:11
      let _1: I32;                         // in scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10
      let mut _3: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:26
      let mut _4: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:20
      let mut _5: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:23: +2:26
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/repr_transparent.rs:+1:9: +1:10
          let _2: I32;                     // in scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10
          scope 2 {
              debug y => _2;               // in scope 2 at $DIR/repr_transparent.rs:+2:9: +2:10
          }
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10
          Deinit(_1);                      // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19
          (_1.0: i32) = const 0_i32;       // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19
          StorageLive(_2);                 // scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10
          StorageLive(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26
          StorageLive(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20
-         _4 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20
+         _4 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20
          StorageLive(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26
-         _5 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26
-         _3 = Add(move _4, move _5);      // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26
+         _5 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26
+         _3 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26
          StorageDead(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26
          StorageDead(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26
          Deinit(_2);                      // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27
-         (_2.0: i32) = move _3;           // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27
+         (_2.0: i32) = const 0_i32;       // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27
          StorageDead(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:26: +2:27
          _0 = const ();                   // scope 0 at $DIR/repr_transparent.rs:+0:11: +3:2
          StorageDead(_2);                 // scope 1 at $DIR/repr_transparent.rs:+3:1: +3:2
          StorageDead(_1);                 // scope 0 at $DIR/repr_transparent.rs:+3:1: +3:2
          return;                          // scope 0 at $DIR/repr_transparent.rs:+3:2: +3:2
      }
  }
  
