- // MIR for `h` before Inline
+ // MIR for `h` after Inline
  
  fn h() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline_diverging.rs:+0:12: +0:12
      let _1: (!, !);                      // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
+     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
+     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22
+         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37
+         let _3: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10
+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14
+         let mut _5: ();                  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:16
+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14
+         let mut _7: ();                  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:16
+         let mut _8: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7
+         let mut _9: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10
+         scope 2 {
+             debug a => _3;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10
+             scope 3 {
+                 debug b => _9;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
-         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
+         StorageLive(_2);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
+         _2 = sleep;                      // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
                                           // mir::Constant
-                                          // + span: $DIR/inline_diverging.rs:22:5: 22:15
-                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(<ZST>) }
-                                          // mir::Constant
                                           // + span: $DIR/inline_diverging.rs:22:16: 22:21
                                           // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }
+         StorageLive(_9);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22
+         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10
+         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14
+         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14
+         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16
+         _3 = <fn() -> ! {sleep} as Fn<()>>::call(move _4, move _5) -> [return: bb1, unwind: bb5]; // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16
+                                          // mir::Constant
+                                          // + span: $DIR/inline_diverging.rs:27:13: 27:14
+                                          // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }
+     }
+ 
+     bb1: {
+         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16
+         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16
+         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14
+         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14
+         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16
+         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16
+                                          // mir::Constant
+                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14
+                                          // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }
+     }
+ 
+     bb2: {
+         StorageDead(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16
+         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16
+         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7
+         _8 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7
+         Deinit(_1);                      // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11
+         (_1.0: !) = move _8;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11
+         (_1.1: !) = move _9;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11
+         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11
+         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2
+         drop(_2) -> bb3;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2
+     }
+ 
+     bb3: {
+         unreachable;                     // scope 0 at $DIR/inline_diverging.rs:30:2: 30:2
+     }
+ 
+     bb4 (cleanup): {
+         drop(_3) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2
+     }
+ 
+     bb5 (cleanup): {
+         drop(_2) -> bb6;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2
+     }
+ 
+     bb6 (cleanup): {
+         resume;                          // scope 1 at $DIR/inline_diverging.rs:26:1: 30:2
      }
  }
  
